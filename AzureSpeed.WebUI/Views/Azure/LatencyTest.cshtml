@{
    ViewBag.Title = "Azure Storage Latency Test";
}

@Scripts.Render("~/bundles/flot")
<script type="text/javascript">
    $(function () {
        var latency = {
            data: [],
            totalPoints: 300,
            updateInterval: 30,
            plot: undefined,
            getData: function () {
                if (latency.data.length > 0) {
                    latency.data = latency.data.slice(1);
                }
                while (latency.data.length < latency.totalPoints) {
                    var prev = latency.data.length > 0 ? latency.data[latency.data.length - 1] : 50,
                        y = prev + Math.random() * 10 - 5;
                    if (y < 0) {
                        y = 0;
                    } else if (y > 100) {
                        y = 100;
                    }
                    latency.data.push(y);
                }
                var res = [];
                for (var i = 0; i < latency.data.length; ++i) {
                    res.push([i, latency.data[i]]);
                }
                return res;
            },
            initEvents: function () {
                $("#updateInterval").val(latency.updateInterval).change(function () {
                    var v = $(this).val();
                    if (v && !isNaN(+v)) {
                        latency.updateInterval = +v;
                        if (updateInterval < 1) {
                            latency.updateInterval = 1;
                        } else if (updateInterval > 2000) {
                            latency.updateInterval = 2000;
                        }
                        $(this).val("" + latency.updateInterval);
                    }
                });
            },
            update: function () {
                latency.plot.setData([latency.getData()]);
                latency.plot.draw();
            },
            init: function () {
                latency.initEvents();
                var plotOption = {
                    series: {
                        shadowSize: 0
                    },
                    yaxis: {
                        min: 0,
                        max: 100
                    },
                    xaxis: {
                        show: false
                    }
                };
                latency.plot = $.plot("#placeholder", [latency.getData()], plotOption);
                latency.plot.draw();
                setInterval(latency.update, latency.updateInterval);
            }
        };
        latency.init();
        window.latency = latency;
    });
</script>
<style>
    .demo-container {
        box-sizing: border-box;
        width: 850px;
        height: 450px;
        padding: 20px 15px 15px 15px;
        margin: 15px auto 30px auto;
        border: 1px solid #ddd;
        background: #fff;
        background: linear-gradient(#f6f6f6 0, #fff 50px);
        background: -o-linear-gradient(#f6f6f6 0, #fff 50px);
        background: -ms-linear-gradient(#f6f6f6 0, #fff 50px);
        background: -moz-linear-gradient(#f6f6f6 0, #fff 50px);
        background: -webkit-linear-gradient(#f6f6f6 0, #fff 50px);
        box-shadow: 0 3px 10px rgba(0,0,0,0.15);
        -o-box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        -ms-box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        -moz-box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        -webkit-box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    }

    .demo-placeholder {
        width: 100%;
        height: 100%;
        font-size: 14px;
        line-height: 1.2em;
    }
</style>
<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="panel panel-default">
                <div class="panel-heading">Demo</div>
                <div class="panel-body">
                    <div id="content">
                        <div class="demo-container">
                            <div class="demo-placeholder" id="placeholder"> </div>
                        </div>
                        <p> You can update a chart periodically to get a real-time effect by using a timer to insert the new data in the plot and redraw it.</p>
                        <p> Time between updates: <input id="updateInterval" type="text" value="" style="text-align: right; width:5em"> milliseconds</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>